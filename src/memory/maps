#! /usr/bin/env python2.7
# Convert /proc/*/smaps to a machine-readable format.
# Usage: ./maps < /proc/*/smaps

import sys
import re

import nsclock # custom module

# make sure order matches in /proc/*/smaps after a line starting with address
items = ['sz', 'rss', 'pss', 'sc',
         'sd', 'pc', 'pd', 'ref',
         'anon', 'anonhg', 'swap',
         'kernpgsz', 'mmupgsz']

addr_re  = re.compile('^([0-9a-f]+)-([0-9a-f]+)')
field_re = re.compile('^([A-Za-z_]*):\W+([0-9]+)\W+([a-z])B')

def parse_map(curtime, section):
    lines = [str(curtime)]

    # first line is section descriptor
    line = section[0].replace('[', '').replace(']', '')
    items = addr_re.split(line)[1:3] # start, end
    items.extend(line.split()[1:]) # all other fields
    if len(items) == 7:
        items.append('NA') # add missing 'name' field
    lines.extend(items)

    # remainder lines are info about that section
    for l in section[1:]:
        (name,value,unit) = field_re.split(l)[1:4]
        lines.append(value)

    return lines

def go():
    section = []
    line = sys.stdin.readline()
    curtime = str(nsclock.nsclock())
    while line:
        line = line.rstrip()
        if addr_re.match(line) != None: # new section
            if len(section) > 0: # false only on first iteration
                print(' '.join(parse_map(curtime, section)))
            section = [line] # start new section
        else: # continue existing section
            section.append(line)
        line = sys.stdin.readline()

def show_header():
    # column headers for lines in /proc/*/maps
    head = ['nstime', 'start', 'end', 'perms', 'offset', 'dev', 'inode', 'name']
    # extend with extra fields from smaps
    head.extend(items)
    print(' '.join(head))

def usage():
    print('Usage: ./smaps < /proc/*/smaps')
    print('       ./smaps head')

# --- Start here ---

if len(sys.argv) > 2:
    usage()
    sys.exit(1)
elif len(sys.argv) == 2:
    if sys.argv[1] == 'head':
        show_header()
        sys.exit(0)
    else:
        usage()
        sys.exit(1)
else:
    go()


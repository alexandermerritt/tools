#! /usr/bin/env bash
set -u
set -e

# Time slept between reads to smaps file
DELAY_US=100000

# Resolve current directory. Borrowed from SO.
SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do
    DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
    SOURCE="$(readlink "$SOURCE")"
    [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
done
DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"

# Our utility script
MAPS="${DIR}/maps"
if [ ! -e "$MAPS" ]; then
    echo "Error: 'maps' script must be in same directory as ./record_maps"
    exit 1
fi

function read_smaps() {
    procname=$(basename $1)
    pid="$2"

    iternum=0

    fname="smaps.$procname.$pid"
    [ -e $fname ] && mv -f $fname $fname.old
    echo "Writing to $fname"

    # for all writes to the output file, prefix an extra column indicating to
    # which instance of reading the smaps file they belong

    # write column names
    echo -n 'iter ' > $fname && $MAPS head >> $fname

    tfile=$(mktemp)
    while [ true ]; do
        [ ! -e /proc/$pid/smaps ] && break
        # wrap into subshell and or with true so it doesn't kill script
        (cat /proc/$pid/smaps | $MAPS > $tfile) || true
        entries=$(wc -l < $tfile)
        paste -d ' ' <(yes $iternum | head -n $entries) <(cat $tfile) >> $fname
        usleep $DELAY_US
        iternum=$((iternum+1))
    done
}

[ $# -le 1 ] && echo 'Usage: ./record_maps cmd [args..]' && exit 1

$@ &
pid0=$!
read_smaps $1 $pid0 &
wait $pid0
sleep 1 # read_smaps will quit when /proc/pid disappears

